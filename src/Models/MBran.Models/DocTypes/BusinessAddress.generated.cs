//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace MBran.Models
{
	// Mixin content Type 1074 with alias "businessAddress"
	/// <summary>_BusinessAddress</summary>
	public partial interface IBusinessAddress : IPublishedContent
	{
		/// <summary>Address 1</summary>
		string BusinessAddress1 { get; }

		/// <summary>Address 2</summary>
		string BusinessAddress2 { get; }

		/// <summary>City</summary>
		string BusinessAddressCity { get; }

		/// <summary>Country</summary>
		object BusinessAddressCountry { get; }

		/// <summary>State</summary>
		string BusinessAddressState { get; }

		/// <summary>Zip</summary>
		string BusinessAddressZip { get; }
	}

	/// <summary>_BusinessAddress</summary>
	[PublishedContentModel("businessAddress")]
	public partial class BusinessAddress : PublishedContentModel, IBusinessAddress
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "businessAddress";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BusinessAddress(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BusinessAddress, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Address 1
		///</summary>
		[ImplementPropertyType("businessAddress1")]
		public string BusinessAddress1
		{
			get { return GetBusinessAddress1(this); }
		}

		/// <summary>Static getter for Address 1</summary>
		public static string GetBusinessAddress1(IBusinessAddress that) { return that.GetPropertyValue<string>("businessAddress1"); }

		///<summary>
		/// Address 2
		///</summary>
		[ImplementPropertyType("businessAddress2")]
		public string BusinessAddress2
		{
			get { return GetBusinessAddress2(this); }
		}

		/// <summary>Static getter for Address 2</summary>
		public static string GetBusinessAddress2(IBusinessAddress that) { return that.GetPropertyValue<string>("businessAddress2"); }

		///<summary>
		/// City
		///</summary>
		[ImplementPropertyType("businessAddressCity")]
		public string BusinessAddressCity
		{
			get { return GetBusinessAddressCity(this); }
		}

		/// <summary>Static getter for City</summary>
		public static string GetBusinessAddressCity(IBusinessAddress that) { return that.GetPropertyValue<string>("businessAddressCity"); }

		///<summary>
		/// Country
		///</summary>
		[ImplementPropertyType("businessAddressCountry")]
		public object BusinessAddressCountry
		{
			get { return GetBusinessAddressCountry(this); }
		}

		/// <summary>Static getter for Country</summary>
		public static object GetBusinessAddressCountry(IBusinessAddress that) { return that.GetPropertyValue("businessAddressCountry"); }

		///<summary>
		/// State
		///</summary>
		[ImplementPropertyType("businessAddressState")]
		public string BusinessAddressState
		{
			get { return GetBusinessAddressState(this); }
		}

		/// <summary>Static getter for State</summary>
		public static string GetBusinessAddressState(IBusinessAddress that) { return that.GetPropertyValue<string>("businessAddressState"); }

		///<summary>
		/// Zip
		///</summary>
		[ImplementPropertyType("businessAddressZip")]
		public string BusinessAddressZip
		{
			get { return GetBusinessAddressZip(this); }
		}

		/// <summary>Static getter for Zip</summary>
		public static string GetBusinessAddressZip(IBusinessAddress that) { return that.GetPropertyValue<string>("businessAddressZip"); }
	}
}
