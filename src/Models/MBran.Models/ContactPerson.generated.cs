//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace MBran.Models
{
	// Mixin content Type 1125 with alias "contactPerson"
	/// <summary>_ContactPerson</summary>
	public partial interface IContactPerson : IPublishedContent
	{
		/// <summary>Email</summary>
		string ContactEmail { get; }

		/// <summary>Fax</summary>
		string ContactFax { get; }

		/// <summary>Mobile</summary>
		string ContactMobile { get; }

		/// <summary>Name</summary>
		string ContactName { get; }

		/// <summary>Phone</summary>
		string ContactPhone { get; }
	}

	/// <summary>_ContactPerson</summary>
	[PublishedContentModel("contactPerson")]
	public partial class ContactPerson : PublishedContentModel, IContactPerson
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactPerson";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactPerson(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactPerson, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Email
		///</summary>
		[ImplementPropertyType("contactEmail")]
		public string ContactEmail
		{
			get { return GetContactEmail(this); }
		}

		/// <summary>Static getter for Email</summary>
		public static string GetContactEmail(IContactPerson that) { return that.GetPropertyValue<string>("contactEmail"); }

		///<summary>
		/// Fax
		///</summary>
		[ImplementPropertyType("contactFax")]
		public string ContactFax
		{
			get { return GetContactFax(this); }
		}

		/// <summary>Static getter for Fax</summary>
		public static string GetContactFax(IContactPerson that) { return that.GetPropertyValue<string>("contactFax"); }

		///<summary>
		/// Mobile
		///</summary>
		[ImplementPropertyType("contactMobile")]
		public string ContactMobile
		{
			get { return GetContactMobile(this); }
		}

		/// <summary>Static getter for Mobile</summary>
		public static string GetContactMobile(IContactPerson that) { return that.GetPropertyValue<string>("contactMobile"); }

		///<summary>
		/// Name
		///</summary>
		[ImplementPropertyType("contactName")]
		public string ContactName
		{
			get { return GetContactName(this); }
		}

		/// <summary>Static getter for Name</summary>
		public static string GetContactName(IContactPerson that) { return that.GetPropertyValue<string>("contactName"); }

		///<summary>
		/// Phone
		///</summary>
		[ImplementPropertyType("contactPhone")]
		public string ContactPhone
		{
			get { return GetContactPhone(this); }
		}

		/// <summary>Static getter for Phone</summary>
		public static string GetContactPhone(IContactPerson that) { return that.GetPropertyValue<string>("contactPhone"); }
	}
}
